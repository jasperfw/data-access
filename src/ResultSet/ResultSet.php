<?php

namespace JasperFW\DataAccess\ResultSet;

use Iterator;
use JasperFW\DataAccess\DAO;
use JasperFW\DataAccess\Exception\DatabaseQueryException;
use Psr\Log\LoggerInterface;
use Psr\Log\NullLogger;

/**
 * Class ResultSet
 *
 * The ResultSet class wraps a result from PDO. This class is designed to provide the ability to retrieve the records
 * from a data retrieval operation in an efficient and consistent manner.
 *
 * @package JasperFW\DataAccess\ResultSet
 */
abstract class ResultSet implements Iterator
{
    /** @var bool|\Traversable|array|resource The result set */
    protected $result;
    protected $pointer;
    protected $errorCode;
    protected $errorMessage;
    /** @var LoggerInterface */
    protected $logger;
    /** @var DAO Reference to the database connection that this was created for */
    protected $dbc;

    /**
     * @param \Traversable|bool|array|resource $result
     * @param DAO                              $dbc
     * @param null|LoggerInterface             $logger
     */
    public function __construct($result, DAO $dbc, ?LoggerInterface $logger = null)
    {
        $this->result = $result;
        $this->pointer = 0;
        $this->dbc = $dbc;
        $this->logger = $logger ?? new NullLogger();
    }

    /**
     * Rerun a query using the prepared statement. This is more efficent than creating new prepared statements when
     * doing bulk operations.
     *
     * @param array $params
     *
     * @return ResultSet|null
     * @throws DatabaseQueryException
     */
    abstract public function execute(array $params): ?ResultSet;

    /**
     * Return the current element
     *
     * @return array Returns the current result row.
     */
    abstract public function current(): array;

    /**
     * Return the current element and advances the pointer to the next element. This should be used for iterating over
     * the result set and should not be mixed with use of current().
     *
     * @return array|bool Returns the current result row.
     */
    abstract public function fetch();

    /**
     * Checks if current position is valid
     *
     * @return boolean The return value will be casted to boolean and then evaluated.
     *       Returns true on success or false on failure.
     */
    abstract public function valid(): bool;

    /**
     * Converts the full result set to an array. This can be very memory intensive, especially for large result sets
     * and therefore is not typically recommended.
     *
     * @return array
     */
    abstract public function toArray(): array;

    /**
     * Returns the number of rows affected by the statement if it was a DELETE, INSERT or UPDATE. May return the number
     * of rows in a result set as well, but this is unpredictable.
     *
     * @return int The number of rows
     */
    abstract public function numRows(): int;

    /**
     * Advance the pointer to the next position
     */
    public function next(): void
    {
        $this->pointer++;
    }

    /**
     * Rewind the pointer to the first position
     */
    public function rewind(): void
    {
        $this->pointer = 0;
    }

    /**
     * Return the index of the current element, since the rows don't have keys
     *
     * @return int
     */
    public function key(): int
    {
        return $this->pointer;
    }

    /**
     * Returns true if the query was successful, false otherwise.
     *
     * @return bool True if the query was successful
     */
    public function querySucceeded(): bool
    {
        if (0 == $this->errorCode) {
            return true;
        }
        return false;
    }

    /**
     * Returns the error code associated with the query, or 0 if no error was generated.
     *
     * @return int
     */
    public function getErrorCode(): int
    {
        return $this->errorCode;
    }

    /**
     * Returns the error message generated by the query, or an empty string if no error was generated.
     *
     * @return string
     */
    public function getErrorMessage(): string
    {
        return $this->errorMessage;
    }

    /**
     * Returns the traversable result object, usually a PDOStatement
     */
    public function getResultObject()
    {
        return $this->result;
    }
}